/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ojdbc.aerospikehelper.ui;

import com.aerospike.client.Key;
import com.ojdbc.aerospikehelper.bean.AerospikeRow;
import com.ojdbc.aerospikehelper.bean.ConnectionInfo_set;
import com.ojdbc.aerospikehelper.util.AerospikeDAO;
import com.ojdbc.aerospikehelper.util.AerospikeUtil;
import com.ojdbc.aerospikehelper.util.StackUtil;
import com.ojdbc.aerospikehelper.util.StringUtil;
import com.ojdbc.aerospikehelper.util.UIUtil;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Executors;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Arthur
 */
public class ViewerJPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form ViewerJPanel
     */
    public ViewerJPanel() {
        initComponents();
        init();
        UIUtil.setKeyMask(commandJTA);
        Executors.newSingleThreadExecutor().execute(() -> {
            try {
                dao = new AerospikeDAO(connectionInfo_all.getIp(), connectionInfo_all.getPort());
                this.commandJTA.setText("select * from " + connectionInfo_all.getNamespace() + "." + connectionInfo_all.getSetName());
                showTable(null);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Connect failed:\n" + StackUtil.getStackTrace(e));
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        commandJTA = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultJTB = new javax.swing.JTable();

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        commandJTA.setColumns(20);
        commandJTA.setRows(5);
        commandJTA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                commandJTAKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(commandJTA);

        jSplitPane1.setTopComponent(jScrollPane1);

        resultJTB.setAutoCreateRowSorter(true);
        resultJTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        resultJTB.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        resultJTB.setColumnSelectionAllowed(true);
        resultJTB.setShowGrid(true);
        resultJTB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultJTBMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(resultJTB);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void resultJTBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultJTBMouseClicked
        if (evt.getClickCount() == 2) {
            int row = ((JTable) evt.getSource()).rowAtPoint(evt.getPoint());
            int col = ((JTable) evt.getSource()).columnAtPoint(evt.getPoint());
            Object obj = resultJTB.getModel().getValueAt(row, col);
            if (obj != null) {
                ShowDetailDialog showDetailDialog = new ShowDetailDialog(null, true, obj.toString());
                showDetailDialog.setVisible(true);
            }

        } else if (evt.getClickCount() == 1) {
            if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
                //通过点击位置找到点击为表格中的行  
                int focusedRowIndex = resultJTB.rowAtPoint(evt.getPoint());
                if (focusedRowIndex == -1) {
                    return;
                }
                //将表格所选项设为当前右键点击的行  
                resultJTB.setRowSelectionInterval(focusedRowIndex, focusedRowIndex);
                //弹出菜单  
                jPopupMenu1.show(resultJTB, evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_resultJTBMouseClicked

    private void commandJTAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_commandJTAKeyReleased
        int MASK = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();
        if (evt.getKeyCode() == KeyEvent.VK_R && ((evt.getModifiers() & MASK) != 0 || evt.isControlDown())) {
            ((DefaultTableModel) resultJTB.getModel()).setColumnCount(0);
            mode = null;
            Executors.newSingleThreadExecutor().execute(() -> {
                whereFilter(commandJTA.getText());
            });

        }
    }//GEN-LAST:event_commandJTAKeyReleased
    private void whereFilter(String command) {
        if (command == null) {
            return;
        }
        try {
            Map<String, String> wheres = StringUtil.parseWhere(command);
            showTable(wheres);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Connect failed:\n" + StackUtil.getStackTrace(e));
        }

    }

    private void init() {
        JMenuItem delMenItem = new JMenuItem();
        delMenItem.setText("delete");
        delMenItem.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent evt) {
                super.mouseReleased(evt);
                int rows[] = resultJTB.getSelectedRows();
                if (rows.length == 0) {
                    return;
                }
                for (int row : rows) {
                    Object pk = resultJTB.getModel().getValueAt(row, 0);
                    if (pk == null && "null".equals(pk)) {
                        return;
                    }
                    dao.delete(new Key(connectionInfo_all.getNamespace(), connectionInfo_all.getSetName(), (String) pk));
                    DefaultTableModel dtm = (DefaultTableModel) resultJTB.getModel();
                    dtm.removeRow(row);
                }

            }

        });
        jPopupMenu1.add(delMenItem);
    }

    public AerospikeDAO getDao() {
        return dao;
    }

    public void setDao(AerospikeDAO dao) {
        this.dao = dao;
    }

    public ConnectionInfo_set getConnectionInfo_all() {
        return connectionInfo_all;
    }

    public void setConnectionInfo_all(ConnectionInfo_set connectionInfo_all) {
        this.connectionInfo_all = connectionInfo_all;
    }

    public void showTable(Map<String, String> wheres) {
        List<Object[]> rows = new ArrayList<>();
        List<AerospikeRow> allRecords = new ArrayList<>();
        int count[] = new int[3];
        count[0] = 0;
        count[1] = 0;
        count[2] = 0;
        Set<String> colsSet = new HashSet<>();
        dao.query(AerospikeUtil.createStatement(connectionInfo_all.getNamespace(),
                connectionInfo_all.getSetName(), null, null),
                (k, v) -> {

                    boolean isAdd = false;
                    int hitCount = 0;
                    if (wheres != null) {
                        for (Map.Entry<String, String> entry : wheres.entrySet()) {
                            if (v.bins != null && v.bins.containsKey(entry.getKey())) {
                                if (v.bins.get(entry.getKey()).toString().contains(entry.getValue())) {
                                    isAdd = true;
                                    hitCount += 1;
                                }
                            }

                            if (entry.getKey().equals("PK")) {
                                isAdd = (k.userKey + "").contains(entry.getValue());
                            }
                        }
                    }
                    colsSet.addAll(v.bins.keySet());
                    if (wheres == null || hitCount == wheres.size() || (wheres.size() == 2 && wheres.containsKey("rownum_begin"))) {
                        allRecords.add(new AerospikeRow(k.userKey + "", v.bins));
                        count[0] += 1;

                    }
                });

        Object[] cols = new Object[colsSet.size() + 1];
        int ii = 1;
        mode = new DefaultTableModel() {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        mode.addColumn("PK");
        Map<String, Integer> colNameIndex = new HashMap<>();
        for (String row1 : colsSet) {
            cols[ii] = row1;
            mode.addColumn(cols[ii]);
            colNameIndex.put(row1, ii);
            ii += 1;
        }

        resultJTB.setModel(mode);
        int width = 100;
        int maxWidth = resultJTB.getParent().getParent().getSize().width - 100;
        width = maxWidth / resultJTB.getColumnModel().getColumnCount() > width ? maxWidth / resultJTB.getColumnModel().getColumnCount() : width;
        for (int i = 0; i < resultJTB.getColumnModel().getColumnCount(); i++) {
            resultJTB.getColumnModel().getColumn(i).setMinWidth(width);
        }

        allRecords.forEach(row -> {
            rows.add(handler(row, colNameIndex));
        });

        int begin = 0;
        int end = maxRowsCount > rows.size() ? rows.size() : maxRowsCount;
        if (wheres != null) {
            if (wheres.containsKey("rownum_begin")) {
                begin = Integer.parseInt(wheres.get("rownum_begin"));
            }
            if (wheres.containsKey("rownum_end")) {
                end = Integer.parseInt(wheres.get("rownum_end"));
            }
        }
        end = end > rows.size() ? rows.size() : end;
        for (int i = begin; i < end; i++) {
            mode.addRow(rows.get(i));
        }

    }

    private Object[] handler(AerospikeRow aRow, Map<String, Integer> index) {
        Object[] row = new Object[index.size() + 1];
        row[0] = aRow.getPK();
        for (Map.Entry<String, Object> entry : aRow.getBins().entrySet()) {
            if (index.containsKey(entry.getKey())) {
                row[index.get(entry.getKey())] = entry.getValue();
            }
        }
        return row;
    }
    private final int maxRowsCount = 100;
    private DefaultTableModel mode;
    private ConnectionInfo_set connectionInfo_all;
    private AerospikeDAO dao;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea commandJTA;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable resultJTB;
    // End of variables declaration//GEN-END:variables
}
